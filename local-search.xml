<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构——静态链表</title>
    <link href="undefined2019/10/06/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/"/>
    <url>2019/10/06/%E9%9D%99%E6%80%81%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<p>#静态链表</p><p>在某些高级语言中没有提供“指针”这种数据类型，若想采用链表作存储结构，采用顺序存储结构数组模拟实现链表，在数组的每个表目中设置“游标（Cursor）”来模拟指针，由自己编写从数组中“分配结点”和“回收结点”的过程。这种方式被称为<strong>静态链表</strong>（Static Linked List）。</p><p><strong><em>静态链表和动态链表的区别</em></strong>：静态链表限制了数据元素存放的位置范围；动态链表是整个内存空间</p><p><strong>用游标模拟实现链表的方法</strong>：定义一个较大的结构数组作为结点空间存储池。每个结点应含有两个域，即data域和cursor域。data域用来存放结点的数据信息，此时的cursor域存放的不再是指针而是游标，游标存放的是其后继结点在结构数组中的相对位置（即数组下标值）。数组的第0个分量可以设计成表的头结点，头结点的cursor域指示了表中第一个结点的位置。表尾结点的cursor域为-1，表示静态链表的结束。</p><p>静态链表可以借助结构体数组来描述，为了方便我们进行插入数据，我们一般会把数组建立的大一些，以便有一些空闲空间可以便于插入时不至于数据溢出。</p><pre><code class="#define">typedef struct{     ElemType data;     int cursor;}Component,StaticList[Maxsize];</code></pre><p>#静态链表的基本操作</p><p>##初始化</p><p>所谓初始化操作，是指将这个静态链表初始化一个空闲结点静态链表。设space为静态链表存储空间的首地址，av为备用链表的头指针。</p><pre><code>void initial(StaticList space,int *av){     int k;     space[0].cursor=-1;/*设置已用静态链表的头指针指向space空间位置0，space[0]相当于头结点*/     for(k=1;k&lt;Maxsize-1;k++)          space[k].cursor=k+1;/*连链*/     space[Maxsize-1].cursor=-1;/*标记链尾*/     *av=1/*设置备用链表头指针初值*/}/*initial*/</code></pre><p><strong>注意</strong>：已用空间头指针此时可视为单链表的头结点，备用空间头指针av指向空闲结点静态链表的第一个结点。</p><p>##分配结点空间</p><p>对系统而言，在空闲结点链表中分配结点空间相当于空闲结点链表中减少（删除）一个结点，对使用者而言，相当于申请得到了一个可用的新结点。</p><pre><code>int getnode(StaticList space,int *av)/*从备用链表摘下一个结点空间，分配给待插入静态链表中的元素*/{     int i;     i=*av;     *av=space[*av].cursor;     return i;}</code></pre><p>##回收结点空间</p><p>对系统而言，空闲结点链表回收空闲结点相当于空闲结点链表中增加一个结点，对使用者而言，相当于释放了一个不用的结点。</p><pre><code>void freenode(StaticList space,int *av,int k)/*从space备用链表中回收序号为k的结点，av为备用链表的头指针*/{     space[k].cursor=*av;     *av=k;}</code></pre><p>##添加数据</p><pre><code>//向链表中插入数据，body表示链表的头结点在数组中的位置，add表示插入元素的位置，a表示要插入的数据void insertArr(component * array,int body,int add,char a){    int tempBody=body;//tempBody做遍历结构体数组使用    //找到要插入位置的上一个结点在数组中的位置    for (int i=1; i&lt;add; i++)     {        tempBody=array[tempBody].cur;    }    int insert=mallocArr(array);//申请空间，准备插入    array[insert].data=a;    array[insert].cur=array[tempBody].cur;//新插入结点的游标等于其直接前驱结点的游标    array[tempBody].cur=insert;//直接前驱结点的游标等于新插入结点所在数组中的下标</code></pre><p>##删除元素</p><p>静态链表中删除指定元素，只需实现以下 2 步操作：<br>1、将存有目标元素的节点从数据链表中摘除；<br>2、将摘除节点添加到备用链表，以便下次再用；</p><pre><code>//备用链表回收空间的函数，其中array为存储数据的数组，k表示未使用节点所在数组的下标void freeArr(component *array,int k){    array[k].cur=array[0].cur;    array[0].cur=k;}//删除结点函数，a 表示被删除结点中数据域存放的数据void deletArr(component *array,int body,char a){    int tempBody=body;    //找到被删除结点的位置    while (array[tempBody].data!=a)     {        tempBody=array[tempBody].cur;        //当tempBody为0时，表示链表遍历结束，说明链表中没有存储该数据的结点        if (tempBody==0)        {            printf(&quot;链表中没有此数据&quot;);            return;        }    }    //运行到此，证明有该结点    int del=tempBody;    tempBody=body;    //找到该结点的上一个结点，做删除操作    while (array[tempBody].cur!=del)     {        tempBody=array[tempBody].cur;    }    //将被删除结点的游标直接给被删除结点的上一个结点    array[tempBody].cur=array[del].cur;    //回收被摘除节点的空间    freeArr(array, del);}</code></pre><p>##查找数据</p><p>静态链表查找指定元素，由于我们只知道静态链表第一个元素所在数组中的位置，因此只能通过逐个遍历静态链表的方式，查找存有指定数据元素的节点。</p><pre><code>//在以body作为头结点的链表中查找数据域为elem的结点在数组中的位置int selectElem(component *array,int body,char elem){    int tempBody=body;    //当游标值为0时，表示链表结束    while (array[tempBody].cur!=0)     {        if (array[tempBody].data==elem)         {            return tempBody;        }        tempBody=array[tempBody].cur;    }    return -1;//返回-1，表示在链表中没有找到该元素}</code></pre><p>##更改数据</p><p>更改静态链表中的数据，只需找到目标元素所在的节点，直接更改节点中的数据域即可。</p><pre><code>//在以body作为头结点的链表中将数据域为oldElem的结点，数据域改为newElemvoid amendElem(component *array,int body,char oldElem,char newElem){    int add=selectElem(array, body, oldElem);    if (add==-1)    {        printf(&quot;无更改元素&quot;);        return;    }    array[add].data=newElem;}</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>Static LinkedList</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo+GitHub搭建博客</title>
    <link href="undefined2019/09/29/Hexo+GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>2019/09/29/Hexo+GitHub%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>#关于hexo与github使用过程中的问题与笔记</p><p><strong>一、搭建个人博客前提：</strong></p><p><strong><em>Node.js、git</em></strong> 环境安装</p><p><strong>二、Hexo安装</strong></p><p>安装Hexo</p><pre><code>npm install hexo -cli -g #安装hexo模块hexo init blog #通过hexo创建一个blog项目cd blog #打开blog文件夹npm installhexo server #开发服务</code></pre><p><strong>三、使用github</strong></p><p>GitHub中创建一个与用户名一致的仓库，以 <strong><em>io</em></strong> 为后缀，且一个账户只能建立一个。</p><p>如建立一个名叫<code>injoinD.github.io</code>的仓库，其中<code>injoinD</code>为用户名。</p><p><strong>四、配置git信息（Hexo和GitHub之间利用SSH通信）</strong></p><p>1.设置Git的user name和Email：</p><pre><code>git config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱&quot;</code></pre><p>2.生成密钥</p><pre><code>ssh-keygen -t rsa -C &quot;邮箱&quot;</code></pre><p>打开以.ssh结尾的文件夹，将里面的内容配置到GitHub项目里的SSH and GPG keys中</p><p><strong>五、配置Deployment</strong></p><blockquote><p>在blog项目根目录下找到_config.yml文件，找到Deployment，做出如下修改：</p></blockquote><pre><code>deploy:  type: git  repo: git@github.com:yourname/yourname.github.io.git  branch: master</code></pre><p>如：仓库地址是<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:injoinD/injoinD.github.io.git,所以配置如下：</p><pre><code>deploy:  type: git  repo: git@github.com:injoinD/injoinD.github.io.git  branch: master</code></pre><p><strong>六、安装hexo-diployer-git自动部署发布工具</strong></p><pre><code>npm install hexo-deployer-git --save</code></pre><p><strong>七、生成静态文件部署到GitHub</strong></p><p>通过hexo命令，发布到GitHub上</p><pre><code>hexo g #生成网站静态文件到默认设置的 public 文件夹hexo d #自动生成网站静态文件，并部署到设定的仓库hexo clean #清除缓存文件 db.json 和已生成的静态文件 public</code></pre><p><strong><em>通过链接 injoinD.github.io即可访问 injoinD为自己的用户名</em></strong> </p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MarkDown语法小结</title>
    <link href="undefined2019/09/29/MarkDown%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93/"/>
    <url>2019/09/29/MarkDown%E8%AF%AD%E6%B3%95%E5%B0%8F%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>#MarkDown语法小结</p><h3 id="1-标题"><a href="#1-标题" class="headerlink" title="1.标题"></a>1.标题</h3><ul><li>使用 <code>#</code> 表示标题，一级标题使用一个 <code>#</code> ，二级标题使用两个 <code>##</code> ，以此类推，共有六级标题。</li><li>使用 <code>=====</code> 表示高阶标题，使用 <code>---------</code> 表示次阶标题。</li></ul><ol><li><code>#</code> 和标题之间记得有个空格哦。</li><li><code>====</code> 和 <code>----</code> 表示标题时，大于等于2个都可以表示。</li><li>我通常在标题分级时使用标题标记，这个的用处很明了了。</li></ol><p>示例1</p><pre><code># 这是一级标题这也是一级标题========## 这是二级标题这也是二级标题--------------</code></pre><h1 id="这是一级标题"><a href="#这是一级标题" class="headerlink" title="这是一级标题"></a>这是一级标题</h1><h1 id="这也是一级标题"><a href="#这也是一级标题" class="headerlink" title="这也是一级标题"></a>这也是一级标题</h1><h2 id="这是二级标题"><a href="#这是二级标题" class="headerlink" title="这是二级标题"></a>这是二级标题</h2><h2 id="这也是二级标题"><a href="#这也是二级标题" class="headerlink" title="这也是二级标题"></a>这也是二级标题</h2><h3 id="2-引用"><a href="#2-引用" class="headerlink" title="2.引用"></a>2.引用</h3><p>使用 <code>&gt;</code> 表示引用， <code>&gt;&gt;</code> 表示引用里面再套一层引用，依次类推。</p><ol><li>如果 <code>&gt;</code> 和 <code>&gt;&gt;</code> 嵌套使用的话，从 <code>&gt;&gt;</code> 退到 <code>&gt;</code> 时，必须之间要加一个空格或者 <code>&gt;</code> 作为过渡，否则默认为下一行和上一行是同一级别的引用。如示例所示。</li><li>引用标记里可以使用其他标记，如：有序列表或无序列表标记，代码标记等。</li></ol><p>示例</p><pre><code>&gt; 这是一级引用&gt;&gt;这是二级引用&gt;&gt;&gt; 这是三级引用&gt;这是一级引用</code></pre><blockquote><p>这是一级引用</p><blockquote><p>这是二级引用</p><blockquote><p>这是三级引用</p></blockquote></blockquote></blockquote><blockquote><p>这是一级引用</p></blockquote><h3 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3 代码块"></a>3 代码块</h3><p>使用3个连续的”`”符号包围起来表示代码块。</p><ol><li>本文档所有使用讲解Markdown语法标记示例的地方都是使用代码块标记的。</li><li>代码块前后都得有换行哦</li></ol><pre><code>$(document).ready(function() {  $(&#39;pre code&#39;).each(function(i, block) {    hljs.highlightBlock(block);  });});</code></pre><h3 id="4-行内代码"><a href="#4-行内代码" class="headerlink" title="4 行内代码"></a>4 行内代码</h3><p>使用``表示行内代码。本页部分文字中间的英文字母就是使用行内代码标记标记的。</p><p>示例</p><pre><code>这是`javascript`代码</code></pre><p>这是 <code>javascript</code> 代码</p><h4 id="5-链接"><a href="#5-链接" class="headerlink" title="5 链接"></a>5 链接</h4><p>使用 <code>[](link)</code> 表示行内链接。其中：</p><ul><li><code>[]</code> 内的内容为要添加链接的文字。</li><li><code>link</code> 为链接地址。</li></ul><p>示例</p><pre><code>我觉得[Markdown](https://appsto.re/cn/jK8Cbb.i)真是个方便的编辑器.</code></pre><p>我觉得<a href="https://appsto.re/cn/jK8Cbb.i" target="_blank" rel="noopener">Markdown</a>真是个方便的编辑器.</p><h3 id="6-数学公式"><a href="#6-数学公式" class="headerlink" title="6 数学公式"></a>6 数学公式</h3><p><code>$</code>包围的区块将会解析为数学公式，连续的<code>$$</code>将独占一行并居中显示</p><p>当 $a \ne 0$, 此方程式有两个解 $ax^2 + bx + c = 0$，他们是 </p><p>$$x = {-b \pm \sqrt{b^2-4ac} \over 2a}.$$</p><h3 id="7-导入图片"><a href="#7-导入图片" class="headerlink" title="7 导入图片"></a>7 导入图片</h3><p>使用 <code>![Alt text](/path/to/img.jpg)</code> 导入图片。其中：</p><ul><li><code>Alt text</code> 为如果图片无法显示时显示的文字；</li><li><code>/path/to/img.jpg</code> 为图片所在路径；</li></ul><p>点击辅助键盘中的添加图片按钮，<strong>Markdown</strong>会自动帮你帮你把图片上传到图片存储服务器，并补齐链接</p><p>示例</p><pre><code>![Markdown](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1569701098939&amp;di=ff20e6935f1d4085402df94ed4f5cc4a&amp;imgtype=0&amp;src=http%3A%2F%2Fcn.hdwall365.com%2Fwallpapers%2F1509%2FSydney-Opera-House-Australia-night-bridge-lights-sea-blue_m.jpg)</code></pre><p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1569701098939&di=ff20e6935f1d4085402df94ed4f5cc4a&imgtype=0&src=http%3A%2F%2Fcn.hdwall365.com%2Fwallpapers%2F1509%2FSydney-Opera-House-Australia-night-bridge-lights-sea-blue_m.jpg" srcset="/img/loading.gif" alt="Markdown"></p><h3 id="8-ToDo-List"><a href="#8-ToDo-List" class="headerlink" title="8 ToDo List"></a>8 ToDo List</h3><pre><code>- [x] 支持数学公式- [x] 支持TodoList- [ ] 支持自定义样式- [ ] 支持自定义图床</code></pre><p>小写x表示已完成， 空格表示未完成</p><ul><li><input checked disabled type="checkbox"> 支持数学公式</li><li><input checked disabled type="checkbox"> 支持TodoList</li><li><input disabled type="checkbox"> 支持自定义样式</li><li><input disabled type="checkbox"> 支持自定义图床</li></ul><h3 id="9-粗体和斜体"><a href="#9-粗体和斜体" class="headerlink" title="9 粗体和斜体"></a>9 粗体和斜体</h3><ol><li>使用 <code>**</code> 或者 <code>__</code> 表示粗体。</li><li>使用 <code>*</code> 或者 <code>_</code> 表示斜体。</li><li>前后的 <code>*</code> 或 <code>_</code> 与要 <strong>加粗或倾斜</strong> 的字体之间不能有空格。</li></ol><p>示例</p><pre><code> **粗体** *斜体*</code></pre><p><strong>粗体</strong></p><p><em>斜体</em></p><h3 id="10-列表"><a href="#10-列表" class="headerlink" title="10 列表"></a>10 列表</h3><p>使用 <code>1. 2. 3.</code> 表示有序列表，使用 <code>*</code> 或 <code>-</code> 或 <code>+</code> 表示无序列表。</p><ol><li>无序列表或有序列表标记和后面的文字之间要有一个空格隔开。</li><li>有序列表标记不是按照你写的数字进行显示的，而是根据当前有序列表标记所在位置显示的，如示例1所示。</li><li>无序列表的项目符号是按照实心圆、空心圆、实心方格的层级关系递进的，如例2所示。通常情况下，同一层级使用同一种标记表示，便于自己查看和管理。</li></ol><h4 id="例1：有序列表"><a href="#例1：有序列表" class="headerlink" title="例1：有序列表"></a>例1：有序列表</h4><pre><code>1. 第一点2. 第二点4. 第三点</code></pre><ol><li>第一点</li><li>第二点</li><li>第三点</li></ol><h4 id="例2：无序列表"><a href="#例2：无序列表" class="headerlink" title="例2：无序列表"></a>例2：无序列表</h4><pre><code>+ 一级无序列表内容    * 二级无序列表内容    - 二级无序列表内容        - 三级无序列表内容        - 三级无序列表内容+ 一级无序列表内容    - 二级无序列表内容</code></pre><ul><li>一级无序列表内容<ul><li>二级无序列表内容</li></ul><ul><li>二级无序列表内容<ul><li>三级无序列表内容</li><li>三级无序列表内容</li></ul></li></ul></li><li>一级无序列表内容<ul><li>二级无序列表内容</li></ul></li></ul><h3 id="11-分割线"><a href="#11-分割线" class="headerlink" title="11 分割线"></a>11 分割线</h3><p>使用 <code>---</code> 或者 <code>***</code> 或者 <code>* * *</code> 表示水平分割线。</p><ol><li>只要 <code>*</code> 或者 <code>-</code> 大于等于三个就可组成一条平行线。</li><li>使用 <code>---</code> 作为水平分割线时，要在它的前后都空一行，防止 <code>---</code> 被当成标题标记的表示方式。</li></ol><p>示例</p><pre><code>---**** * *</code></pre><h3 id="12-删除线"><a href="#12-删除线" class="headerlink" title="12 删除线"></a>12 删除线</h3><p>使用 <code>~~</code> 表示删除线。</p><ol><li>注意 <code>~~</code> 和 要添加删除线的文字之间不能有空格。</li><li>我常使用在显示的告诉自己这行文字是要删除的。</li></ol><p>示例</p><pre><code>~~这是一条删除线~~</code></pre><p><del>这是一条删除线</del></p><h3 id="13表格"><a href="#13表格" class="headerlink" title="13表格"></a>13表格</h3><p>上面空一行下面空两行</p><table><thead><tr><th>Heading</th><th>Heading</th><th>Heading</th></tr></thead><tbody><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr></tbody></table><p>添加边框:</p><table><thead><tr><th>Heading</th><th>Heading</th><th>Heading</th></tr></thead><tbody><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr><tr><td>Cell</td><td>Cell</td><td>Cell</td></tr></tbody></table><p>对齐方式:</p><table><thead><tr><th align="left">Heading</th><th align="center">Heading</th><th align="right">Heading</th></tr></thead><tbody><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr><tr><td align="left">Left</td><td align="center">Center</td><td align="right">Right</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>MarkDown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>git&amp;github学习总结</title>
    <link href="undefined2019/09/26/Git&amp;GitHub%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <url>2019/09/26/Git&amp;GitHub%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="git-amp-github学习总结"><a href="#git-amp-github学习总结" class="headerlink" title="git&amp;github学习总结"></a>git&amp;github学习总结</h1><h3 id="1-Git的优势"><a href="#1-Git的优势" class="headerlink" title="1.Git的优势"></a>1.Git的优势</h3><ul><li>大部分操作在本地完成，不需要联网</li><li>完整性保证</li><li>尽可能添加数据而不是删除或修改数据</li><li>分支操作非常快捷流畅</li><li>与 Linux 命令全面兼容</li></ul><h3 id="2-Git的基本操作"><a href="#2-Git的基本操作" class="headerlink" title="2.Git的基本操作"></a>2.Git的基本操作</h3><ul><li><strong>2.1 状态查看</strong></li></ul><p><code>git stastus</code></p><blockquote><p>查看工作区、暂存区的状态</p></blockquote><ul><li><strong>2.2 添加</strong></li></ul><p><code>git add [file name]</code></p><blockquote><p>将工作区的“新建/修改”添加到暂存区</p></blockquote><ul><li><strong>2.3 提交</strong></li></ul><p><code>git commit -m &quot;commit message&quot; [file name]</code></p><blockquote><p>将暂存区的内容提交到本地库 </p></blockquote><ul><li><strong>2.4 查看历史记录</strong></li></ul><p><code>git log</code></p><blockquote><p>多屏显示控制方式： 空格向下翻页 b 向上翻页 q 退出</p></blockquote><ul><li><strong>2.5 前进后退</strong></li></ul><p><strong><em>本质：HEAD指针移动</em></strong></p><p>基于索引值操作[推荐]</p><p><code>git reset --hard [局部索引值]</code></p><p><code>git reset --hard a6ace91</code></p><blockquote><p>使用^符号：只能后退</p></blockquote><p><code>git reset --hard HEAD^</code></p><blockquote><p>注：一个^表示后退一步，n个表示后退n步<br>使用~符号：只能后退</p></blockquote><p><code>git reset --hard HEAD~n</code></p><blockquote><p>注：表示后退n步</p></blockquote><ul><li><p><strong>2.6 reset命令的三个参数对比</strong></p><ul><li><p>1.<br><code>--soft 参数</code></p><blockquote><p>仅仅在本地库移动HEAD指针</p></blockquote></li><li><p>2.<br><code>--mixed 参数</code></p><blockquote><p>在本地库移动 HEAD 指针</p><p>重置暂存区</p></blockquote></li><li><p>3.<br><code>--hard 参数</code></p><blockquote><p>在本地库移动HEAD指针</p><p>重置暂存区</p><p>重置工作区</p></blockquote></li></ul></li></ul><ul><li><p><strong>2.7 删除文件并找回</strong></p><ul><li>前提：删除前，文件存在时的状态提交到了本地库。</li><li>操作：<code>git reset --hard [指针位置]</code></li></ul></li></ul><pre><code>    &gt;删除操作已经提交到本地库：指针位置指向历史记录    &gt;    &gt;删除操作尚未提交到本地库：指针位置使用 HEAD</code></pre><ul><li><p><strong>2.8 比较文件差异</strong></p><ul><li><p><code>git diff [文件名]</code></p><blockquote><p>将工作区中的文件和暂存区进行比较</p></blockquote></li><li><p><code>git diff [本地库中历史版本] [文件名]</code></p><blockquote><p>将工作区中的文件和本地库历史记录比较 </p><p>不带文件名比较多个文件</p></blockquote></li></ul></li></ul><h3 id="3-分支管理"><a href="#3-分支管理" class="headerlink" title="3.分支管理"></a>3.分支管理</h3><ul><li><p>3.1 什么是分支？ </p><pre><code>在版本控制过程中，使用多条线同时推进多个任务。</code></pre></li><li><p>3.2 分支的好处？</p><ul><li>同时并行推进多个功能开发，提高开发效率</li><li>各个分支在开发过程中，如果某一个分支开发失败，不会对其他分支有任 何影响。失败的分支删除重新开始即可。 </li></ul></li><li><p>3.3 分支操作</p><ul><li><p>创建分支 <code>git branch [分支名]</code></p></li><li><p>查看分支 <code>git branch -v</code></p></li><li><p>切换分支 <code>git checkout [分支名]</code></p></li><li><p>合并分支</p><ul><li><p>第一步：切换到接受修改的分支（被合并，增加新内容）上 </p><p>   <code>git checkout [被合并分支名]</code></p></li><li><p>第二步：执行 <strong>merge</strong> 命令 </p><pre><code>`git merge [有新内容分支名]`</code></pre></li></ul></li></ul></li><li><p>3.4 冲突的解决</p><ul><li><p>第一步：编辑文件，删除特殊符号</p></li><li><p>第二步：把文件修改到满意的程度，保存退出</p></li><li><p>第三步：<code>git add [文件名]</code></p></li><li><p>第四步：<code>git commit -m &quot;日志信息&quot;</code></p><p>   <strong>注意：此时 commit 一定不能带具体文件名</strong></p></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Git GitHub</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dddddwen</title>
    <link href="undefined2019/09/25/duwen/"/>
    <url>2019/09/25/duwen/</url>
    
    <content type="html"><![CDATA[<p>搭博客的过程中虽然遇到了很多问题，但还是成功解决，拥有了属于自己的博客。</p><p>然后最近进入工作室的学习中，接触了很多新知识，现在只是略懂皮毛，希望快快将这些基础消化。</p><p>很感谢工作室各位的帮助，还是要谢谢宁哥，每周检查学习情况的制度不断督促着我，能让我按时完成学习任务。</p><p>最近逐渐开始步入正轨，接下来就要百分六十投入工作室，百分四十投入学习，在2019最后的三个月里，我想我会收获很多。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="undefined2019/09/25/hello-world/"/>
    <url>2019/09/25/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>